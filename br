#!/bin/bash

set -euo pipefail

show_help() {
    cat <<EOF
Usage:
  br /path/to/dir                 Create backups (.bitrot.db-bk, .bitrot.sha512-bk)
  br /path/to/dir -r              Restore from backups
  br -r /path/to/dir              (also valid)
  br /path/to/dir -d              Delete all .bitrot* files (asks for confirmation)
  br -d /path/to/dir              (also valid)
  br /source /target -m          Move .bitrot.db and .bitrot.sha512 to target dir

Options:
  -r, --replace     Restore from backup
  -d, --delete      Delete bitrot files + backups
  -m, --move        Move .bitrot.db and .bitrot.sha512 to another dir
  -h, --help        Show this help message
EOF
}

# Initialize flags
REPLACE=false
DELETE=false
MOVE=false
ARGS=()
SOURCE_DIR=""
DEST_DIR=""

# Parse flags and positional args
for arg in "$@"; do
    case "$arg" in
        -r|--replace) REPLACE=true ;;
        -d|--delete)  DELETE=true ;;
        -m|--move)    MOVE=true ;;
        -h|--help)    show_help; exit 0 ;;
        *)            ARGS+=("$arg") ;;
    esac
done

# Set directory args based on count and mode
if [[ "$MOVE" == true ]]; then
    if [[ ${#ARGS[@]} -ne 2 ]]; then
        echo "Error: Move mode requires source and destination directories."
        show_help
        exit 1
    fi
    SOURCE_DIR="${ARGS[0]}"
    DEST_DIR="${ARGS[1]}"
else
    if [[ ${#ARGS[@]} -ne 1 ]]; then
        echo "Error: You must specify exactly one directory."
        show_help
        exit 1
    fi
    SOURCE_DIR="${ARGS[0]}"
    DEST_DIR="$SOURCE_DIR"
fi

# Check that paths are valid
if [[ ! -d "$SOURCE_DIR" ]]; then
    echo "Error: '$SOURCE_DIR' is not a directory."
    exit 1
fi
SOURCE_DIR="$(cd "$SOURCE_DIR" && pwd)"
DEST_DIR="$(cd "$DEST_DIR" && pwd)"

# File paths
DB_FILE="$SOURCE_DIR/.bitrot.db"
SHA_FILE="$SOURCE_DIR/.bitrot.sha512"
DB_BK="$SOURCE_DIR/.bitrot.db-bk"
SHA_BK="$SOURCE_DIR/.bitrot.sha512-bk"

# --- Move mode ---
if [[ "$MOVE" == true ]]; then
    [[ -f "$DB_FILE" || -f "$SHA_FILE" ]] || {
        echo "Error: No .bitrot files in $SOURCE_DIR"
        exit 1
    }
    mkdir -p "$DEST_DIR"

    if [[ -f "$DEST_DIR/.bitrot.db" || -f "$DEST_DIR/.bitrot.sha512" ]]; then
        echo "Warning: Destination already has .bitrot files"
        read -rp "Overwrite them? (yes/no): " confirm
        [[ "$confirm" =~ ^[Yy]([Ee][Ss])?$ ]] || exit 0
    fi

    [[ -f "$DB_FILE" ]] && mv "$DB_FILE" "$DEST_DIR"
    [[ -f "$SHA_FILE" ]] && mv "$SHA_FILE" "$DEST_DIR"
    echo "Moved bitrot files to $DEST_DIR"
    exit 0
fi

# --- Delete mode ---
if [[ "$DELETE" == true ]]; then
    echo "This will delete:"
    echo "  $DB_FILE"
    echo "  $SHA_FILE"
    echo "  $DB_BK"
    echo "  $SHA_BK"
    read -rp "Are you sure? (yes/no): " confirm
    [[ "$confirm" =~ ^[Yy]([Ee][Ss])?$ ]] || exit 0
    rm -f "$DB_FILE" "$SHA_FILE" "$DB_BK" "$SHA_BK"
    echo "Deleted bitrot files."
    exit 0
fi

# --- Restore mode ---
if [[ "$REPLACE" == true ]]; then
    [[ -f "$DB_BK" && -f "$SHA_BK" ]] || {
        echo "Error: Backup files not found."
        exit 1
    }
    echo "Restoring from backup:"
    echo "  $DB_BK → $DB_FILE"
    echo "  $SHA_BK → $SHA_FILE"
    read -rp "Overwrite originals? (yes/no): " confirm
    [[ "$confirm" =~ ^[Yy]([Ee][Ss])?$ ]] || exit 0
    cp -p "$DB_BK" "$DB_FILE"
    cp -p "$SHA_BK" "$SHA_FILE"
    echo "Restored from backups."
    exit 0
fi

# --- Default: Backup mode ---
if [[ -f "$DB_FILE" && -f "$SHA_FILE" ]]; then
    if [[ -f "$DB_BK" || -f "$SHA_BK" ]]; then
        echo "Error: Backup files already exist."
        exit 1
    fi
    cp -p "$DB_FILE" "$DB_BK"
    cp -p "$SHA_FILE" "$SHA_BK"
    echo "Backup created:"
    echo "  $DB_BK"
    echo "  $SHA_BK"
else
    echo "Error: .bitrot files not found in $SOURCE_DIR"
    exit 1
fi
